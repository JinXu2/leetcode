/*
在仅包含 0 和 1 的数组 A 中，一次 K 位翻转包括选择一个长度为 K 的（连续）子数组，同时将子数组中的每个 0 更改为 1，而每个 1 更改为 0。

返回所需的 K 位翻转的最小次数，以便数组没有值为 0 的元素。如果不可能，返回 -1。

 

示例 1：

输入：A = [0,1,0], K = 1
输出：2
解释：先翻转 A[0]，然后翻转 A[2]。
示例 2：

输入：A = [1,1,0], K = 2
输出：-1
解释：无论我们怎样翻转大小为 2 的子数组，我们都不能使数组变为 [1,1,1]。
示例 3：

输入：A = [0,0,0,1,0,1,1,0], K = 3
输出：3
解释：
翻转 A[0],A[1],A[2]: A变成 [1,1,1,1,0,1,1,0]
翻转 A[4],A[5],A[6]: A变成 [1,1,1,1,1,0,0,0]
翻转 A[5],A[6],A[7]: A变成 [1,1,1,1,1,1,1,1]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-number-of-k-consecutive-bit-flips
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/



/*
1.同一个子数组 反转两次就没有意义了 因此一个子数组最多翻转一次 或者不翻转
2.翻转子数组的前后顺序 是没有影响的 因此从头开始翻转就好
最简单直接的方法变成了：从头开始遍历是0就转 时间复杂度是O(NK)

所以记录每个数字要翻转的次数就好了 使用差分数组
改变一个区间内的元素后，对于差分数组而言 只有开始和结束后一个 发生了变化
*/
class Solution {
public:
    int minKBitFlips(vector<int>& A, int K) {
        int n=A.size();
        vector<int> diff(n+1);
        //diff[i]=A[i]-A[i-1]
        int ans=0,revCnt=0;
        for(int i=0;i<n;i++)
        {
            revCnt+=diff[i];
            if((A[i]+revCnt)%2==0)
            {
                if(i+K>n)
                {
                    return -1;
                }
                ans++;
                revCnt++;
                diff[i+K]--;
            }
        }
        return ans;
    }
};







